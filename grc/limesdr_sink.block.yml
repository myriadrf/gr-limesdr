# auto-generated by grc.converter

id: limesdr_sink
label: LimeSuite Sink (TX)
category: '[LimeSuite]'
flags:
- throttle

parameters:
-   id: serial
    label: Device serial
    dtype: string
    hide: none
-   id: filename
    label: File
    dtype: file_open
-   id: channel_mode
    label: Channel
    dtype: int
    default: '0'
    options: ['0', '1', '2']
    option_labels: [A, B, (A+B)MIMO]
    hide: part
-   id: rf_freq
    label: RF frequency
    dtype: float
    default: 100e6
-   id: samp_rate
    label: Sample rate
    dtype: float
    default: samp_rate
    hide: part
-   id: oversample
    label: Oversample
    dtype: int
    default: '0'
    options: ['0', '1', '2', '4', '8', '16', '32']
    option_labels: [Default, '1', '2', '4', '8', '16', '32']
    hide: part
-   id: dacVal
    label: TCXO:DAC value
    dtype: int
    default: '125'
    hide: part
-   id: length_tag_name
    label: Length tag name
    dtype: string
    hide: none
-   id: nco_freq_ch0
    label: CH_A:NCO frequency
    category: CH_A
    dtype: float
    default: '0'
    hide: part
-   id: calibr_bandw_ch0
    label: CH_A:Calibration bandw.
    category: CH_A
    dtype: float
    default: 5e6
    hide: part
-   id: pa_path_ch0
    label: CH_A:PA path
    category: CH_A
    dtype: int
    default: '255'
    options: ['255', '1', '2']
    option_labels: [Auto(Default), Band1, Band2]
    hide: part
-   id: analog_bandw_ch0
    label: CH_A:Analog filter bandw.
    category: CH_A
    dtype: float
    default: 5e6
    hide: part
-   id: digital_bandw_ch0
    label: CH_A:Digital filter bandw.
    category: CH_A
    dtype: float
    default: '0'
    hide: part
-   id: gain_dB_ch0
    label: CH_A:Gain,dB
    category: CH_A
    dtype: int
    default: '30'
    hide: part
-   id: nco_freq_ch1
    label: CH_B:NCO frequency
    category: CH_B
    dtype: float
    default: '0'
    hide: part
-   id: calibr_bandw_ch1
    label: CH_B:Calibration bandw.
    category: CH_B
    dtype: float
    default: 5e6
    hide: part
-   id: pa_path_ch1
    label: CH_B:PA path
    category: CH_B
    dtype: int
    default: '1'
    options: ['1', '2']
    option_labels: [Band1, Band2]
    hide: part
-   id: analog_bandw_ch1
    label: CH_B:Analog filter bandw.
    category: CH_B
    dtype: float
    default: 5e6
    hide: part
-   id: digital_bandw_ch1
    label: CH_B:Digital filter bandw.
    category: CH_B
    dtype: float
    default: '0'
    hide: part
-   id: gain_dB_ch1
    label: CH_B:Gain,dB
    category: CH_B
    dtype: int
    default: '30'
    hide: part
-   id: allow_tcxo_dac
    label: Allow TCXO DAC control
    category: Advanced
    dtype: int
    default: '0'
    options: ['1', '0']
    option_labels: ['Yes', 'No']
    hide: part

inputs:
-   domain: stream
    dtype: complex
    multiplicity: ${ channel_mode }
asserts:
- ${ channel_mode >= 0 }
- ${ 2 >= channel_mode }
- ${ rf_freq > 0 }
- ${ calibr_bandw_ch0 >= 2.5e6 or calibr_bandw_ch0 == 0 }
- ${ 120e6 >= calibr_bandw_ch0 }
- ${ calibr_bandw_ch1 >= 2.5e6 or calibr_bandw_ch1 == 0 }
- ${ 120e6 >= calibr_bandw_ch1 }
- ${ analog_bandw_ch0 >= 5e6 or analog_bandw_ch0 == 0 }
- ${ 130e6 >= analog_bandw_ch0 }
- ${ analog_bandw_ch1 >= 5e6 or analog_bandw_ch1 == 0 }
- ${ 130e6 >= analog_bandw_ch1 }
- ${ digital_bandw_ch0 >= 0 }
- ${ samp_rate >= digital_bandw_ch0 or digital_bandw_ch0 == 0 }
- ${ digital_bandw_ch1 >= 0 }
- ${ samp_rate >= digital_bandw_ch1 or digital_bandw_ch1 == 0 }
- ${ gain_dB_ch0 >= 0 }
- ${ 60 >= gain_dB_ch0 }
- ${ gain_dB_ch1 >= 0 }
- ${ 60 >= gain_dB_ch1 }
- ${ samp_rate > 0 }
- ${ 61.44e6 >= samp_rate }

templates:
    imports: import limesdr
    make: |-
      limesdr.sink(${serial}, ${channel_mode}, ${filename}, ${length_tag_name})

      % if filename() == "":

      self.${id}.set_sample_rate(${samp_rate})

      % if int(oversample()) > 0:
      self.${id}.set_oversampling(${oversample})
      % endif

      self.${id}.set_center_freq(${rf_freq}, 0)

      % if analog_bandw_ch0() > 0 and (int(channel_mode()) == 0 or int(channel_mode()) == 2):
      self.${id}.set_bandwidth(${analog_bandw_ch0},0)
      % endif

      % if analog_bandw_ch1() > 0 and int(channel_mode()) > 0:
      self.${id}.set_bandwidth(${analog_bandw_ch1},1)
      % endif

      % if digital_bandw_ch0() > 0 and (int(channel_mode()) == 0 or int(channel_mode()) == 2):
      self.${id}.set_digital_filter(${digital_bandw_ch0},0)
      % endif

      % if digital_bandw_ch1() > 0 and channel_mode() > 0:
      self.${id}.set_digital_filter(${digital_bandw_ch1},1)
      % endif

      % if channel_mode() == 0 or channel_mode() == 2:
      self.${id}.set_gain(${gain_dB_ch0},0)
      % endif

      % if channel_mode() > 0:
      self.${id}.set_gain(${gain_dB_ch1},1)
      % endif

      % if channel_mode() == 0 or channel_mode() == 2:
      self.${id}.set_antenna(${pa_path_ch0},0)
      % endif

      % if channel_mode() > 0:
      self.${id}.set_antenna(${pa_path_ch1},1)
      % endif

      % if calibr_bandw_ch0() > 0 and (channel_mode() == 0 or channel_mode() == 2):
      self.${id}.calibrate(${calibr_bandw_ch0}, 0)
      % endif

      % if calibr_bandw_ch1() > 0 and channel_mode() > 0:
      self.${id}.calibrate(${calibr_bandw_ch1}, 1)
      % endif

      % if nco_freq_ch0() != 0 and (channel_mode() == 0 or channel_mode() == 2):
      self.${id}.set_nco(${nco_freq_ch0},0)
      % endif

      % if nco_freq_ch1() != 0 and channel_mode() > 0:
      self.${id}.set_nco(${nco_freq_ch1},1)
      % endif

      % endif

      % if allow_tcxo_dac() == 1:
      self.${id}.set_tcxo_dac(${dacVal})
      %endif

    callbacks:
    - set_center_freq(${rf_freq}, 0)
    - set_antenna(${pa_path_ch0},0)
    - set_antenna(${pa_path_ch1},1)
    - set_nco(${nco_freq_ch0},0)
    - set_nco(${nco_freq_ch1},1)
    - set_bandwidth(${analog_bandw_ch0},0)
    - set_bandwidth(${analog_bandw_ch1},1)
    - set_digital_filter(${digital_bandw_ch0},0)
    - set_digital_filter(${digital_bandw_ch1},1)
    - set_gain(${gain_dB_ch0},0)
    - set_gain(${gain_dB_ch1},1)
    - set_tcxo_dac(${dacVal})

documentation: "-------------------------------------------------------------------------------------------------------------------\n\
    DEVICE SERIAL\n\nDevice serial number obtained by running\n\n\tLimeUtil --find\n\
    \nIf left blank, the first device in the list is used.\n-------------------------------------------------------------------------------------------------------------------\n\
    CHANNEL\n\nUse this setting to choose between SISO channels or MIMO mode.\n\n\
    Note: not all devices support MIMO mode and have more than one channel.\n-------------------------------------------------------------------------------------------------------------------\n\
    FILE\n\nGenerate .ini file with LimeSuite and select path.\n\nNote: setting must\
    \ match in LimeSuite Source and Sink for the same device.\n-------------------------------------------------------------------------------------------------------------------\n\
    RF FREQUENCY\n\nSet RF center frequency for TX (both channels).\nLimeSDR-USB supports\t\
    \  [100e3,3800e6] Hz.\nLimeSDR-PCIe supports\t  [100e3,3800e6] Hz.\nLimeSDR-Mini\
    \ supports\t  [10e6,3500e6] Hz.\nLimeNET-Micro supports  [10e6,3500e6] Hz.\n-------------------------------------------------------------------------------------------------------------------\n\
    SAMPLE RATE\n\nHere you can enter sample rate for TX.\n\nLimeSDR-USB sample rate\
    \ must be no more than 61.44e6 S/s.\nLimeSDR-PCIe sample rate must be no more\
    \ than 61.44e6 S/s.\nLimeSDR-Mini sample rate must be no more than 30.72e6 S/s.\n\
    LimeNET-Micro sample rate must be no more than 10e6 S/s.\n\nNote: LimeSDR-Mini\
    \ and LimeNET-Micro supports only the same sample rate for TX and RX.\n-------------------------------------------------------------------------------------------------------------------\n\
    OVERSAMPLE\n\nHere you can select oversampling value for TX. Default value uses\
    \ highest possible oversampling value.\n\nNote: LimeSDR-Mini and LimeNET-Micro\
    \ supports only the same oversampling value for TX and RX.\n-------------------------------------------------------------------------------------------------------------------\n\
    Length tag name\n\nSet name of stream tag with which number of samples sent is\
    \ set.\n-------------------------------------------------------------------------------------------------------------------\n\
    NCO FREQUENCY\n\nAdjust numerically controlled oscillator for each channel. 0\
    \ means that NCO is OFF.\n-------------------------------------------------------------------------------------------------------------------\n\
    CALIBRATION BANDW.\n\nThis setting is used to set bandwidth for calibration for\
    \ each channel. This value should be equal to your signal bandwidth.\nCalibration\
    \ is off when bandwidth is set to 0.\n\nCalibration bandwidth range must be [2.5e6,120e6]\
    \ Hz.\n-------------------------------------------------------------------------------------------------------------------\n\
    PA PATH\n\nSelect active power amplifier path of each channel. \nFor LimeSDR-Mini\
    \ and LimeNET-Micro Auto(Default) option sets preferred PA path depending on RF\
    \ frequency.\nFor LimeSDR-USB and LimeSDR-PCIe Auto(Default) sets PA path to Band1.\n\
    -------------------------------------------------------------------------------------------------------------------\n\
    ANALOG FILTER BANDW.\n\nEnter analog filter bandwidth for each channel. Analog\
    \ filter is off if bandwidth is set to 0.\nAnalog filter bandwidth range must\
    \ be [5e6,130e6] Hz.\n-------------------------------------------------------------------------------------------------------------------\n\
    DIGITAL FILTER BANDW.\n\nEnter digital filter bandwidth for each channel. Digital\
    \ filter if off if bandwidth is set to 0.\nBandwidth should not be higher than\
    \ sample rate.\n-------------------------------------------------------------------------------------------------------------------\n\
    GAIN\n\nControls combined TX gain settings. Gain range must be [0,60] dB.\n-------------------------------------------------------------------------------------------------------------------\n\
    TCXO DAC\n\nControls 40 MHz TCXO DAC settings.  To enable this parameter \"Allow\
    \ TCXO DAC control\" in the \"Advanced\" tab must be set to \"Yes\"\nCare must\
    \ be taken as this parameter is returned to default value only after power off.\n\
    \nLimeSDR-Mini default value is 180 range is [0,255]\nLimeSDR-USB default value\
    \ is 125 range is [0,255]\nLimeSDR-PCIe default value is 134 range is [0,255]\n\
    LimeNET-Micro default value is 30714 range is [0,65535]\n\n-------------------------------------------------------------------------------------------------------------------"

file_format: 1
